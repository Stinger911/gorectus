basePath: /api/v1
definitions:
  main.ActivityItem:
    properties:
      action:
        type: string
      collection:
        type: string
      comment:
        type: string
      id:
        type: string
      ip:
        type: string
      item:
        type: string
      timestamp:
        type: string
      user_id:
        type: string
      user_name:
        type: string
    type: object
  main.CollectionMetrics:
    properties:
      collections_by_type:
        additionalProperties:
          type: integer
        type: object
      most_active_collections:
        items:
          $ref: '#/definitions/main.CollectionSummary'
        type: array
      recent_collections:
        items:
          $ref: '#/definitions/main.CollectionSummary'
        type: array
      total_collections:
        type: integer
    type: object
  main.CollectionModel:
    properties:
      created_at:
        example: "2023-01-01T10:30:00Z"
        type: string
      description:
        example: Product catalog collection
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      name:
        example: Products
        type: string
      schema:
        example: '{}'
        type: string
      updated_at:
        example: "2023-12-01T10:30:00Z"
        type: string
    type: object
  main.CollectionSummary:
    properties:
      collection:
        type: string
      created_at:
        type: string
      hidden:
        type: boolean
      icon:
        type: string
      item_count:
        type: integer
      note:
        type: string
      singleton:
        type: boolean
    type: object
  main.CreateFieldRequest:
    properties:
      conditions: {}
      display:
        type: string
      display_options: {}
      field:
        type: string
      group:
        type: string
      hidden:
        type: boolean
      interface:
        type: string
      note:
        type: string
      options: {}
      readonly:
        type: boolean
      required:
        type: boolean
      schema:
        allOf:
        - $ref: '#/definitions/main.FieldSchema'
        description: For creating database columns
      sort:
        type: integer
      special:
        items:
          type: string
        type: array
      translations: {}
      validation: {}
      validation_message:
        type: string
      width:
        type: string
    required:
    - field
    type: object
  main.DashboardOverview:
    properties:
      collection_metrics:
        $ref: '#/definitions/main.CollectionMetrics'
      recent_activity:
        items:
          $ref: '#/definitions/main.ActivityItem'
        type: array
      system_health:
        $ref: '#/definitions/main.SystemHealth'
      system_stats:
        $ref: '#/definitions/main.SystemStats'
      user_insights:
        $ref: '#/definitions/main.UserInsights'
    type: object
  main.ErrorResponse:
    properties:
      error:
        example: Invalid request payload
        type: string
    type: object
  main.FieldDetail:
    properties:
      collection:
        type: string
      conditions: {}
      created_at:
        type: string
      display:
        type: string
      display_options: {}
      field:
        type: string
      group:
        type: string
      hidden:
        type: boolean
      id:
        type: string
      interface:
        type: string
      note:
        type: string
      options: {}
      readonly:
        type: boolean
      required:
        type: boolean
      sort:
        type: integer
      special:
        items:
          type: string
        type: array
      translations: {}
      updated_at:
        type: string
      validation: {}
      validation_message:
        type: string
      width:
        type: string
    type: object
  main.FieldSchema:
    properties:
      data_type:
        description: varchar, integer, boolean, text, json, uuid, timestamp, etc.
        type: string
      default_value:
        description: Default value for column
      foreign_column:
        description: For foreign key relationships
        type: string
      foreign_table:
        description: For foreign key relationships
        type: string
      is_nullable:
        description: Whether column allows NULL
        type: boolean
      is_primary_key:
        description: Whether column is primary key
        type: boolean
      is_unique:
        description: Whether column should be unique
        type: boolean
      max_length:
        description: For varchar
        type: integer
    type: object
  main.FieldsListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/main.FieldDetail'
        type: array
      meta:
        properties:
          limit:
            type: integer
          page:
            type: integer
          total:
            type: integer
        type: object
    type: object
  main.ItemData:
    type: object
  main.ItemModel:
    properties:
      collection_id:
        example: 456e7890-e89b-12d3-a456-426614174001
        type: string
      created_at:
        example: "2023-01-01T10:30:00Z"
        type: string
      data:
        $ref: '#/definitions/main.ItemData'
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      updated_at:
        example: "2023-12-01T10:30:00Z"
        type: string
    type: object
  main.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  main.LoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 86400
        type: integer
      token_type:
        example: Bearer
        type: string
      user:
        $ref: '#/definitions/main.UserModel'
    type: object
  main.Settings:
    properties:
      allow_registration:
        type: boolean
      database_host:
        description: Database Settings (read-only for security)
        type: string
      database_name:
        type: string
      database_port:
        type: string
      database_user:
        type: string
      email_enabled:
        type: boolean
      jwt_secret_exists:
        description: Don't expose actual secret
        type: boolean
      maintenance_mode:
        type: boolean
      password_min_length:
        type: integer
      require_two_factor:
        type: boolean
      session_timeout:
        description: Security Settings (some fields read-only for security)
        type: integer
      site_description:
        type: string
      site_name:
        description: General Settings
        type: string
      smtp_from_email:
        type: string
      smtp_host:
        description: Email Settings
        type: string
      smtp_port:
        type: string
      smtp_user:
        type: string
      updated_at:
        description: Metadata
        type: string
      updated_by:
        type: string
    type: object
  main.SettingsResponse:
    properties:
      data:
        $ref: '#/definitions/main.Settings'
    type: object
  main.SuccessMessage:
    properties:
      message:
        example: Operation completed successfully
        type: string
    type: object
  main.SystemHealth:
    properties:
      database_connected:
        type: boolean
      last_backup:
        type: string
      server_uptime:
        type: string
      version:
        type: string
    type: object
  main.SystemStats:
    properties:
      active_users:
        type: integer
      total_collections:
        type: integer
      total_roles:
        type: integer
      total_sessions:
        type: integer
      total_users:
        type: integer
    type: object
  main.UpdateCollectionRequest:
    properties:
      accountability:
        type: string
      archive_app_filter:
        type: boolean
      archive_field:
        type: string
      archive_value:
        type: string
      collapse:
        type: string
      color:
        type: string
      display_template:
        type: string
      group:
        type: string
      hidden:
        type: boolean
      icon:
        type: string
      item_duplication_fields: {}
      note:
        type: string
      preview_url:
        type: string
      singleton:
        type: boolean
      sort:
        type: integer
      sort_field:
        type: string
      translations: {}
      unarchive_value:
        type: string
      versioning:
        type: boolean
    type: object
  main.UpdateFieldRequest:
    properties:
      conditions: {}
      display:
        type: string
      display_options: {}
      group:
        type: string
      hidden:
        type: boolean
      interface:
        type: string
      note:
        type: string
      options: {}
      readonly:
        type: boolean
      required:
        type: boolean
      schema:
        allOf:
        - $ref: '#/definitions/main.FieldSchema'
        description: For altering database columns
      sort:
        type: integer
      special:
        items:
          type: string
        type: array
      translations: {}
      validation: {}
      validation_message:
        type: string
      width:
        type: string
    type: object
  main.UpdateSettingsRequest:
    properties:
      allow_registration:
        type: boolean
      email_enabled:
        type: boolean
      jwt_secret:
        description: Security Settings
        type: string
      maintenance_mode:
        type: boolean
      password_min_length:
        type: integer
      require_two_factor:
        type: boolean
      session_timeout:
        type: integer
      site_description:
        type: string
      site_name:
        description: General Settings
        type: string
      smtp_from_email:
        type: string
      smtp_host:
        description: Email Settings
        type: string
      smtp_port:
        type: string
      smtp_user:
        type: string
    type: object
  main.UserInsights:
    properties:
      most_active_users:
        items:
          $ref: '#/definitions/main.UserSummary'
        type: array
      new_users_this_month:
        type: integer
      new_users_this_week:
        type: integer
      recent_registrations:
        items:
          $ref: '#/definitions/main.UserSummary'
        type: array
      users_by_role:
        additionalProperties:
          type: integer
        type: object
      users_by_status:
        additionalProperties:
          type: integer
        type: object
    type: object
  main.UserModel:
    properties:
      avatar:
        example: https://example.com/avatar.jpg
        type: string
      created_at:
        example: "2023-01-01T10:30:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      email_notifications:
        example: true
        type: boolean
      external_identifier:
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      language:
        example: en
        type: string
      last_access:
        example: "2023-12-01T10:30:00Z"
        type: string
      last_name:
        example: Doe
        type: string
      last_page:
        example: /dashboard
        type: string
      provider:
        example: local
        type: string
      role_id:
        example: 456e7890-e89b-12d3-a456-426614174001
        type: string
      role_name:
        example: admin
        type: string
      status:
        example: active
        type: string
      tags:
        example: admin,power-user
        type: string
      theme:
        example: light
        type: string
      updated_at:
        example: "2023-12-01T10:30:00Z"
        type: string
    type: object
  main.UserSummary:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_access:
        type: string
      last_name:
        type: string
      role:
        type: string
      status:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@gorectus.com
    name: GoRectus API Support
  description: A comprehensive API for managing collections, items, fields, users,
    and roles
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: GoRectus API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user credentials and return JWT token
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/main.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login
          schema:
            $ref: '#/definitions/main.LoginResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: User login
      tags:
      - authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Log out the current user (client-side token removal)
      produces:
      - application/json
      responses:
        "200":
          description: Successful logout
          schema:
            $ref: '#/definitions/main.SuccessMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - authentication
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get the current authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: Current user information
          schema:
            $ref: '#/definitions/main.UserModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate a new JWT token using the current valid token
      produces:
      - application/json
      responses:
        "200":
          description: New token generated
          schema:
            $ref: '#/definitions/main.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Refresh JWT token
      tags:
      - authentication
  /collections:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all collections in the system
      produces:
      - application/json
      responses:
        "200":
          description: List of collections
          schema:
            items:
              $ref: '#/definitions/main.CollectionModel'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all collections
      tags:
      - collections
    post:
      consumes:
      - application/json
      description: Create a new collection in the system
      parameters:
      - description: Collection data
        in: body
        name: collection
        required: true
        schema:
          $ref: '#/definitions/main.CollectionModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created collection
          schema:
            $ref: '#/definitions/main.CollectionModel'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "409":
          description: Collection already exists
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new collection
      tags:
      - collections
  /collections/{collection}:
    delete:
      consumes:
      - application/json
      description: Delete a specific collection by its name
      parameters:
      - description: Collection name
        in: path
        name: collection
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Collection deleted successfully
          schema:
            $ref: '#/definitions/main.SuccessMessage'
        "400":
          description: Bad request - cannot delete system collection
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Collection not found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a collection by name
      tags:
      - collections
    get:
      consumes:
      - application/json
      description: Retrieve a specific collection by its name
      parameters:
      - description: Collection name
        in: path
        name: collection
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Collection details
          schema:
            $ref: '#/definitions/main.CollectionModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Collection not found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get collection by name
      tags:
      - collections
    patch:
      consumes:
      - application/json
      description: Update an existing collection in the system
      parameters:
      - description: Collection name
        in: path
        name: collection
        required: true
        type: string
      - description: Fields to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/main.UpdateCollectionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated collection
          schema:
            $ref: '#/definitions/main.CollectionModel'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Collection not found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing collection
      tags:
      - collections
  /dashboard:
    get:
      consumes:
      - application/json
      description: Retrieve comprehensive dashboard overview including system stats,
        collection metrics, recent activity, system health, and user insights (user
        insights only available for admins)
      produces:
      - application/json
      responses:
        "200":
          description: Dashboard overview data
          schema:
            additionalProperties:
              $ref: '#/definitions/main.DashboardOverview'
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get dashboard overview
      tags:
      - dashboard
  /dashboard/activity:
    get:
      consumes:
      - application/json
      description: Retrieve recent system activity with optional limit parameter
      parameters:
      - description: 'Maximum number of activity items to return (1-100, default:
          20)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Recent activity data
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/main.ActivityItem'
              type: array
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get recent activity
      tags:
      - dashboard
  /dashboard/collections:
    get:
      consumes:
      - application/json
      description: Retrieve collection metrics including total collections, distribution
        by type, and activity data
      produces:
      - application/json
      responses:
        "200":
          description: Collection metrics data
          schema:
            additionalProperties:
              $ref: '#/definitions/main.CollectionMetrics'
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get collection insights
      tags:
      - dashboard
  /dashboard/stats:
    get:
      consumes:
      - application/json
      description: Retrieve system statistics including user counts, role counts,
        collection counts, and active sessions
      produces:
      - application/json
      responses:
        "200":
          description: System statistics
          schema:
            additionalProperties:
              $ref: '#/definitions/main.SystemStats'
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get system statistics
      tags:
      - dashboard
  /dashboard/users:
    get:
      consumes:
      - application/json
      description: Retrieve user insights including user distribution by status and
        role, new user statistics, and user activity data (Admin only)
      produces:
      - application/json
      responses:
        "200":
          description: User insights data
          schema:
            additionalProperties:
              $ref: '#/definitions/main.UserInsights'
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - Admin access required
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user insights
      tags:
      - dashboard
  /fields:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of all fields in the system with optional
        collection filtering
      parameters:
      - description: 'Page number for pagination (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (max: 100, default: 50)'
        in: query
        name: limit
        type: integer
      - description: Filter fields by collection name
        in: query
        name: collection
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of fields with pagination metadata
          schema:
            $ref: '#/definitions/main.FieldsListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all fields
      tags:
      - fields
  /fields/{collection}:
    get:
      consumes:
      - application/json
      description: Retrieve all fields for a specific collection
      parameters:
      - description: Collection name
        in: path
        name: collection
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of fields for the collection
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/main.FieldDetail'
              type: array
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Collection not found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get fields by collection
      tags:
      - fields
    post:
      consumes:
      - application/json
      description: Create a new field in a collection with optional database column
        creation
      parameters:
      - description: Collection name
        in: path
        name: collection
        required: true
        type: string
      - description: Field creation data
        in: body
        name: field
        required: true
        schema:
          $ref: '#/definitions/main.CreateFieldRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created field details
          schema:
            additionalProperties:
              $ref: '#/definitions/main.FieldDetail'
            type: object
        "400":
          description: Bad request (invalid payload, field name, or field already
            exists)
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Forbidden (admin access required)
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Collection not found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "409":
          description: Field already exists
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new field
      tags:
      - fields
  /fields/{collection}/{field}:
    delete:
      consumes:
      - application/json
      description: Delete a field from a collection and optionally drop the database
        column
      parameters:
      - description: Collection name
        in: path
        name: collection
        required: true
        type: string
      - description: Field name
        in: path
        name: field
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Field deleted successfully
          schema:
            $ref: '#/definitions/main.SuccessMessage'
        "400":
          description: Bad request (cannot delete system field)
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Forbidden (admin access required)
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Field not found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a field
      tags:
      - fields
    get:
      consumes:
      - application/json
      description: Retrieve a specific field by collection and field name
      parameters:
      - description: Collection name
        in: path
        name: collection
        required: true
        type: string
      - description: Field name
        in: path
        name: field
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Field details
          schema:
            additionalProperties:
              $ref: '#/definitions/main.FieldDetail'
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Field not found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get field by name
      tags:
      - fields
    patch:
      consumes:
      - application/json
      description: Update an existing field's metadata and optionally alter the database
        column
      parameters:
      - description: Collection name
        in: path
        name: collection
        required: true
        type: string
      - description: Field name
        in: path
        name: field
        required: true
        type: string
      - description: Field update data
        in: body
        name: updates
        required: true
        schema:
          $ref: '#/definitions/main.UpdateFieldRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated field details
          schema:
            additionalProperties:
              $ref: '#/definitions/main.FieldDetail'
            type: object
        "400":
          description: Bad request (invalid payload or no fields to update)
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Forbidden (admin access required)
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Field not found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing field
      tags:
      - fields
  /health:
    get:
      consumes:
      - application/json
      description: Get the health status of the API
      produces:
      - application/json
      responses:
        "200":
          description: Health status
          schema:
            additionalProperties: true
            type: object
      summary: Health check
      tags:
      - health
  /items/{collection}:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all items from a specific collection
      parameters:
      - description: Collection name
        in: path
        name: collection
        required: true
        type: string
      - description: Limit the number of results
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of items
          schema:
            items:
              $ref: '#/definitions/main.ItemModel'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Collection not found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all items from a collection
      tags:
      - items
    post:
      consumes:
      - application/json
      description: Create a new item in a specific collection
      parameters:
      - description: Collection name
        in: path
        name: collection
        required: true
        type: string
      - description: Item data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/main.ItemModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created item
          schema:
            $ref: '#/definitions/main.ItemModel'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Collection not found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new item
      tags:
      - items
  /items/{collection}/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific item from a collection by its ID
      parameters:
      - description: Collection name
        in: path
        name: collection
        required: true
        type: string
      - description: Item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/main.SuccessMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Item not found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an item
      tags:
      - items
    get:
      consumes:
      - application/json
      description: Retrieve a specific item from a collection by its ID
      parameters:
      - description: Collection name
        in: path
        name: collection
        required: true
        type: string
      - description: Item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Item details
          schema:
            $ref: '#/definitions/main.ItemModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Item not found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get item by ID
      tags:
      - items
    patch:
      consumes:
      - application/json
      description: Update an existing item in a specific collection
      parameters:
      - description: Collection name
        in: path
        name: collection
        required: true
        type: string
      - description: Item ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated item data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/main.ItemModel'
      produces:
      - application/json
      responses:
        "200":
          description: Updated item
          schema:
            $ref: '#/definitions/main.ItemModel'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Item not found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing item
      tags:
      - items
  /settings:
    get:
      consumes:
      - application/json
      description: Retrieve current system settings (Admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Current settings
          schema:
            $ref: '#/definitions/main.SettingsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get system settings
      tags:
      - settings
    patch:
      consumes:
      - application/json
      description: Update system settings (Admin only)
      parameters:
      - description: Settings to update
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/main.UpdateSettingsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated settings
          schema:
            $ref: '#/definitions/main.SettingsResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update system settings
      tags:
      - settings
  /settings/test-connection:
    post:
      consumes:
      - application/json
      description: Test the database connection with current settings (Admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Connection successful
          schema:
            $ref: '#/definitions/main.SuccessMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Connection failed
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Test database connection
      tags:
      - settings
  /settings/test-email:
    post:
      consumes:
      - application/json
      description: Send a test email with current SMTP settings (Admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Test email sent
          schema:
            $ref: '#/definitions/main.SuccessMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Email test failed
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Test email configuration
      tags:
      - settings
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
